// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["createMany"]
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String?      @unique
  password           String
  displayName        String?
  isVerified         Boolean      @default(false)
  verificationToken  String?
  passwordResetToken String?
  googleId           String?      @unique
  facebookId         String?      @unique
  tournaments        Tournament[]
  players            Player[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Tournament {
  id               Int            @id @default(autoincrement())
  name             String
  numberOfTables   Int?
  numberOfGoals    Int?
  sets             Int
  numberOfLives    Int?
  draw             Boolean?
  pointsForWin     Int?
  pointsForDraw    Int?
  user             User?          @relation(fields: [userId], references: [id])
  userId           Int?
  tournamentType   TournamentType @relation(fields: [tournamentTypeId], references: [id])
  tournamentTypeId Int
  games            Game[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model TournamentType {
  id          Int          @id @default(autoincrement())
  name        String
  tournaments Tournament[]
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  games1    Game[]   @relation("p1")
  games2    Game[]   @relation("p2")
  isDeleted Boolean?
  // tournament   Tournament @relation(fields: [tournamentId], references: [id])
  // tournamentId Int
  // scores       Score[]
}

model Game {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  player1      Player[]   @relation("p1")
  player2      Player[]   @relation("p2")
  // player1      Player[]   @relation("p1", fields: [player1Id], references: [id])
  // player2      Player[]   @relation("p2", fields: [player2Id], references: [id])
  // player1Id    Int[]
  // player2Id    Int[]
  scores1      Int[]
  scores2      Int[]
  // scores       Score[]
  index        String
}

// model Player {
//   id           Int           @id @default(autoincrement())
//   name         String
//   user         User?         @relation(fields: [userId], references: [id])
//   userId       Int?
//   // games1 Game[] @relation("participant1")
//   // games2 Game[] @relation("participant2")
//   participant1 Participant[] @relation("player")
//   participant2 Participant[] @relation("teammate")

// }

// model Participant {
//   id           Int        @id @default(autoincrement())
//   name         String
//   tournament   Tournament @relation(fields: [tournamentId], references: [id])
//   tournamentId Int
//   player       Player     @relation("player", fields: [playerId], references: [id])
//   playerId     Int
//   teammate     Player     @relation("teammate", fields: [teammateId], references: [id])
//   teammateId   Int
//   games1       Game[]     @relation("participant1")
//   games2       Game[]     @relation("participant2")
// }

// model Game {
//   id             Int         @id @default(autoincrement())
//   tournament     Tournament  @relation(fields: [tournamentId], references: [id])
//   tournamentId   Int
//   // player1      Player[]   @relation("p1")
//   // player2      Player[]   @relation("p2")
//   participant1   Participant @relation("participant1", fields: [participant1Id], references: [id])
//   participant2   Participant @relation("participant2", fields: [participant2Id], references: [id])
//   participant1Id Int[]
//   participant2Id Int[]
//   scores1        Int[]
//   scores2        Int[]
//   // scores       Score[]
//   index          String
// }
