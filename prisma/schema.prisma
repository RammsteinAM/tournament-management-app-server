// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int          @id @default(autoincrement())
  email              String?      @unique
  password           String
  displayName        String?
  isVerified         Boolean      @default(false)
  verificationToken  String?
  passwordResetToken String?
  googleId           String?      @unique
  facebookId         String?      @unique
  tournaments        Tournament[]
  players            Player[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Tournament {
  id                Int            @id @default(autoincrement())
  name              String
  sets              Int
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  tournamentType    TournamentType @relation(fields: [tournamentTypeId], references: [id])
  tournamentTypeId  Int
  games             Game[]
  players           Player[]
  numberOfTables    Int?
  tablesByGameIndex Json?
  numberOfGoals     Int?
  numberOfLives     Int?
  draw              Boolean?
  monsterDYP        Boolean?
  pointsForWin      Int?
  pointsForDraw     Int?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model TournamentType {
  id          Int          @id @default(autoincrement())
  name        String
  tournaments Tournament[]
}

model Player {
  id          Int          @id @default(autoincrement())
  name        String
  user        User?        @relation(fields: [userId], references: [id])
  userId      Int?
  games1      Game[]       @relation("p1")
  games2      Game[]       @relation("p2")
  isDeleted   Boolean?
  Tournaments Tournament[]
}

model Game {
  id           Int        @id @default(autoincrement())
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId Int
  player1      Player[]   @relation("p1")
  player2      Player[]   @relation("p2")
  scores1      Int[]
  scores2      Int[]
  hasByePlayer Boolean?
  index        String
}
